#!/usr/bin/bash

# Read command line arguments using getopts
VERBOSE=false
while getopts "vo:" opt; do
  case ${opt} in
    v )
        VERBOSE=true
      ;;
    o )
        OUTPUT=$OPTARG
      ;;
    \? )
      echo "Invalid option: -$OPTARG" 1>&2
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

# Set default output file name if none is specified
if [ -z "$OUTPUT" ]
then
        OUTPUT="./api"
fi

# Save current color to variable

# Print header
echo -e "\e[1;33m"
echo "           _  _____ _  _  ___   "
echo "          | |/ |_ _| \| |/ __|  "
echo "          | ' < | || .\` | (_ |  "
echo "        __|_|\_|___|_|\_|\___|__"
echo "       |_   _| __| _ | _ \ \ / /"
echo "         | | | _||   |   /\ V / "
echo "         |_| |___|_|_|_|_\ |_|  "
echo -e "\e[0m"
echo -e "\e[32m========================================\e[0m"
echo -e "\e[32mCompiling \e[1;33mHoly API\e[32m...\e[0m"
echo -e "\e[32m========================================\e[0m"

# Print verbose info if -v flag was passed
if [ "$VERBOSE" = true ]
then
        echo -e "\e[32mCommand line arguments:\e[0m"
        echo "-v     Enable verbose output"
        echo "-o     Set output file name (default: ./api)"
fi

# Get start time
START_TIME=$(date +%s.%N)

# Compile the code
echo -e "\e[32mFiles being compiled:\e[0m"
find src/ -type f \( -name "*.cpp" -o -name "*.h" -o -name "*.hpp" \) -print0 | while read -d $'\0' file
do
        echo -e "\e[0m  $file"
done
SECONDS=0
find src/ -type f \( -name "*.cpp" -o -name "*.h" -o -name "*.hpp" \) -print0 | xargs -0 g++ -std=c++11 -o $OUTPUT || { echo -e "\e[31mCompilation failed!\e[0m" ; exit 1; }

# Get end time
END_TIME=$(date +%s.%N)

# Calculate elapsed time
ELAPSED_TIME=$(echo "scale=2; $END_TIME - $START_TIME" | bc)

# Print footer
echo -e "\e[32m========================================\e[0m"
echo -e "\e[32mCompilation successful!\nOutput file: $OUTPUT\e[0m"
echo -e "\e[32mElapsed time: $ELAPSED_TIME seconds\e[0m"
echo -e "\e[32m========================================\e[0m"

# Check if the Holy API is running on port 8080
echo -e "\e[32mChecking if \e[1;33mHoly API\e[0m\e[32m is running...\e[0m"
sudo lsof -i :8080 || echo -e "\e[1;33mHoly API\e[0m\e[31m is not running on port 8080\e[0m"
echo -e "\n\e[32mYou can run \e[1;33mHoly API\e[0m\e[32m using: \e[0m./api\n"
